// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: transaction.sql

package db

import (
	"context"
	"encoding/json"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (username, context, payload)
VALUES ($1, $2, $3::jsonb)
RETURNING id, username, context, payload, is_confirmed, created_at
`

type CreateTransactionParams struct {
	Username string          `json:"username"`
	Context  string          `json:"context"`
	Column3  json.RawMessage `json:"column_3"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, createTransaction, arg.Username, arg.Context, arg.Column3)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Context,
		&i.Payload,
		&i.IsConfirmed,
		&i.CreatedAt,
	)
	return i, err
}

const getTransaction = `-- name: GetTransaction :one
SELECT id, username, context, payload, is_confirmed, created_at
FROM transactions
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetTransaction(ctx context.Context, id int64) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, getTransaction, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Context,
		&i.Payload,
		&i.IsConfirmed,
		&i.CreatedAt,
	)
	return i, err
}

const listTransactionsForUser = `-- name: ListTransactionsForUser :many
SELECT id, username, context, payload, is_confirmed, created_at
FROM transactions
WHERE username = $1
ORDER BY id
`

func (q *Queries) ListTransactionsForUser(ctx context.Context, username string) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, listTransactionsForUser, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transaction{}
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Context,
			&i.Payload,
			&i.IsConfirmed,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
